// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `darti`.  See the README for how to use this file.
///
class DartiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  Tor arti_start(
    int socks_port,
    ffi.Pointer<ffi.Char> state_dir,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _arti_start(
      socks_port,
      state_dir,
      cache_dir,
    );
  }

  late final _arti_startPtr = _lookup<
      ffi.NativeFunction<
          Tor Function(ffi.Uint16, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('arti_start');
  late final _arti_start = _arti_startPtr.asFunction<
      Tor Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool arti_client_bootstrap(
    ffi.Pointer<ffi.Void> client,
  ) {
    return _arti_client_bootstrap(
      client,
    );
  }

  late final _arti_client_bootstrapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'arti_client_bootstrap');
  late final _arti_client_bootstrap = _arti_client_bootstrapPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void arti_client_set_dormant(
    ffi.Pointer<ffi.Void> client,
    bool soft_mode,
  ) {
    return _arti_client_set_dormant(
      client,
      soft_mode,
    );
  }

  late final _arti_client_set_dormantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'arti_client_set_dormant');
  late final _arti_client_set_dormant = _arti_client_set_dormantPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, bool)>();

  void arti_proxy_stop(
    ffi.Pointer<ffi.Void> proxy,
  ) {
    return _arti_proxy_stop(
      proxy,
    );
  }

  late final _arti_proxy_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'arti_proxy_stop');
  late final _arti_proxy_stop =
      _arti_proxy_stopPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> arti_progress_next(
    ffi.Pointer<Tor> tor,
  ) {
    return _arti_progress_next(
      tor,
    );
  }

  late final _arti_progress_nextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<Tor>)>>(
      'arti_progress_next');
  late final _arti_progress_next = _arti_progress_nextPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<Tor>)>();

  void arti_hello() {
    return _arti_hello();
  }

  late final _arti_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arti_hello');
  late final _arti_hello = _arti_helloPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> arti_last_error_message() {
    return _arti_last_error_message();
  }

  late final _arti_last_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'arti_last_error_message');
  late final _arti_last_error_message = _arti_last_error_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();
}

final class Tor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> client;

  external ffi.Pointer<ffi.Void> proxy;

  external ffi.Pointer<ffi.Void> progress_sender;

  external ffi.Pointer<ffi.Void> progress_receiver;
}
